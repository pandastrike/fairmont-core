"use strict";

var _assert = _interopRequireDefault(require("assert"));

var _amen = require("amen");

var _index = require("../src/index");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(async function () {
  (0, _amen.print)((await (0, _amen.test)("Core functions", [(0, _amen.test)("noOp", function () {
    return (0, _assert.default)((0, _index.noOp)(7) === void 0);
  }), (0, _amen.test)("identity", function () {
    return (0, _assert.default)((0, _index.identity)(7) === 7);
  }), (0, _amen.test)("wrap", function () {
    return (0, _assert.default)((0, _index.wrap)(7)() === 7);
  }), (0, _amen.test)("curry", [(0, _amen.test)("nullary function", function () {
    return (0, _assert.default)((0, _index.curry)(function () {
      return 0;
    })() === 0);
  }), (0, _amen.test)("unary function", function () {
    return (0, _assert.default)((0, _index.curry)(function (x) {
      return x;
    })(1) === 1);
  }), (0, _amen.test)("binary function", function () {
    return (0, _assert.default)((0, _index.curry)(function (x, y) {
      return x + y;
    })(1)(2) === 3);
  }), (0, _amen.test)("tertiary function", function () {
    return (0, _assert.default)((0, _index.curry)(function (x, y, z) {
      return x + y + z;
    })(1)(2)(3) === 6);
  }), (0, _amen.test)("n-ary function", function () {
    return (0, _assert.default)((0, _index.curry)(function (w, x, y, z) {
      return w + x + y + z;
    })(1)(2)(3)(4) === 10);
  })]), (0, _amen.test)("substitute", function () {
    return (0, _assert.default)((0, _index.substitute)([1, _index._, 3], [2])[1] === 2);
  }), (0, _amen.test)("partial", function () {
    var square;
    square = (0, _index.partial)(Math.pow, _index._, 2);
    return (0, _assert.default)(square(3) === 9);
  }), (0, _amen.test)("flip", function () {
    var square;
    square = (0, _index.curry)((0, _index.flip)(Math.pow))(2);
    return (0, _assert.default)(square(3) === 9);
  }), (0, _amen.test)("compose", function () {
    var inverse, inverseSquare, square;

    inverse = function (x) {
      return 1 / x;
    };

    square = function (x) {
      return x * x;
    };

    inverseSquare = (0, _index.compose)(inverse, square);
    return (0, _assert.default)(inverseSquare(5 === 1 / 25));
  }), (0, _amen.test)("compose (promise)", function* () {
    var inverse, inverseSquare, square;

    inverse = function (x) {
      return Promise.resolve(1 / x);
    };

    square = function (x) {
      return x * x;
    };

    inverseSquare = (0, _index.compose)(inverse, square);
    (0, _assert.default)(inverseSquare(5).then != null);
    return (0, _assert.default)((yield inverseSquare(5)) === 1 / 25);
  }), (0, _amen.test)("tee", function () {
    var f;
    f = (0, _index.tee)(function (x) {
      return 1 / x;
    });
    return (0, _assert.default)(5, f(5));
  }), (0, _amen.test)("tee (promise)", async function () {
    var f;
    f = (0, _index.tee)(function (x) {
      return Promise.resolve(1 / x);
    });
    return (0, _assert.default)(5, (await f(5)));
  }), (0, _amen.test)("pipe", function () {
    var a, ab, b;

    a = function (x) {
      return x + "a";
    };

    b = function (x) {
      return x + "b";
    };

    ab = (0, _index.pipe)(a, b);
    return (0, _assert.default)(ab("S") === "Sab");
  }), (0, _amen.test)("apply", function () {
    return (0, _assert.default)((0, _index.apply)(_index.identity, 1) === 1);
  }), (0, _amen.test)("spread", function () {
    return (0, _assert.default)((0, _index.spread)(function (a, b) {
      return a + b;
    })(["a", "b"]) === "ab");
  }), (0, _amen.test)("unary", function () {
    return (0, _assert.default)((0, _index.unary)(function () {}).length === 1);
  }), (0, _amen.test)("binary", function () {
    return (0, _assert.default)((0, _index.binary)(function () {}).length === 2);
  }), (0, _amen.test)("ternary", function () {
    return (0, _assert.default)((0, _index.ternary)(function () {}).length === 3);
  }), (0, _amen.test)("negate", function () {
    return (0, _assert.default)((0, _index.negate)(function () {
      return false;
    })());
  }), (0, _amen.test)("once", function () {
    var f;
    (f = function (i) {
      return (0, _index.once)(function () {
        return i++;
      });
    }(0))();
    return (0, _assert.default)(f() === 0);
  }), (0, _amen.test)("given", function () {
    (0, _assert.default)((0, _index.given)(function (a = 3, b = 2) {
      return a * b;
    }) === 6 && (typeof a === "undefined" || a === null) && (typeof b === "undefined" || b === null));
    return (0, _assert.default)((0, _index.given)(3, 2, function (a, b) {
      return a * b;
    }) === 6);
  }), (0, _amen.test)("memoize", function () {
    var count, f;
    count = 0;
    f = (0, _index.memoize)(function (x, y) {
      count++;
      return x;
    });
    return [(0, _amen.test)("runs the function", function () {
      return (0, _assert.default)(f(1, 2) === 1 && count === 1);
    }), (0, _amen.test)("but only once for a given argument", function () {
      return (0, _assert.default)(f(1, 2) === 1 && count === 1);
    }), (0, _amen.test)("without affecting any other arguments", function () {
      return (0, _assert.default)(f(2, 1) === 2 && count === 2);
    })];
  }())])));
  return process.exit(_amen.success ? 0 : 1);
})();
//# sourceMappingURL=data:application/json;base64,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Q0UsZ0JBQUEsbUJBQUEsRUFBMEIsWUFBQTthQUN4QixxQkFBTyxDQUFBLENBQUEsQ0FBQSxFQUFBLENBQUEsQ0FBQSxLQUFBLENBQUEsSUFBZ0IsS0FBQSxLQUF2QixDQUFBLEM7QUFGSixLQUNFLENBREYsRUFHRSxnQkFBQSxvQ0FBQSxFQUEyQyxZQUFBO2FBQ3pDLHFCQUFPLENBQUEsQ0FBQSxDQUFBLEVBQUEsQ0FBQSxDQUFBLEtBQUEsQ0FBQSxJQUFnQixLQUFBLEtBQXZCLENBQUEsQztBQUpKLEtBR0UsQ0FIRixFQUtFLGdCQUFBLHVDQUFBLEVBQThDLFlBQUE7YUFDNUMscUJBQU8sQ0FBQSxDQUFBLENBQUEsRUFBQSxDQUFBLENBQUEsS0FBQSxDQUFBLElBQWdCLEtBQUEsS0FBdkIsQ0FBQSxDO0FBTkosS0FLRSxDQUxGLEM7QUEvRStCLEdBNEVkLEVBQW5CLENBNUVpQyxDQUF2QixDQUFaO1NBeUZBLE9BQU8sQ0FBUCxJQUFBLENBQWEsZ0JBQUEsQ0FBQSxHQUFiLENBQUEsQztBQTNGRixDQUFHIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGFzc2VydCBmcm9tIFwiYXNzZXJ0XCJcbmltcG9ydCB7cHJpbnQsIHRlc3QsIHN1Y2Nlc3N9IGZyb20gXCJhbWVuXCJcblxuaW1wb3J0IHtub09wLCBpZGVudGl0eSwgd3JhcCwgY3VycnksIF8sIHN1YnN0aXR1dGUsIHBhcnRpYWwsXG4gIGZsaXAsIGNvbXBvc2UsIHBpcGUsIGFwcGx5LCBzcHJlYWQsXG4gIHVuYXJ5LCBiaW5hcnksIHRlcm5hcnksXG4gIG5lZ2F0ZSwgb25jZSwgZ2l2ZW4sIG1lbW9pemUsIHRlZX0gZnJvbSBcIi4uL3NyYy9pbmRleFwiXG5cbmRvIC0+XG5cbiAgcHJpbnQgYXdhaXQgdGVzdCBcIkNvcmUgZnVuY3Rpb25zXCIsIFtcblxuICAgIHRlc3QgXCJub09wXCIsIC0+IGFzc2VydCAobm9PcCA3KSA9PSB1bmRlZmluZWRcbiAgICB0ZXN0IFwiaWRlbnRpdHlcIiwgLT4gYXNzZXJ0IChpZGVudGl0eSA3KSA9PSA3XG4gICAgdGVzdCBcIndyYXBcIiwgLT4gYXNzZXJ0ICh3cmFwIDcpKCkgPT0gN1xuXG4gICAgdGVzdCBcImN1cnJ5XCIsIFtcbiAgICAgICAgdGVzdCBcIm51bGxhcnkgZnVuY3Rpb25cIiwgLT4gYXNzZXJ0IChjdXJyeSAtPiAwKSgpID09IDBcbiAgICAgICAgdGVzdCBcInVuYXJ5IGZ1bmN0aW9uXCIsIC0+IGFzc2VydCAoY3VycnkgKHgpIC0+IHgpKDEpID09IDFcbiAgICAgICAgdGVzdCBcImJpbmFyeSBmdW5jdGlvblwiLCAtPlxuICAgICAgICAgIGFzc2VydCAoY3VycnkgKHgseSkgLT4geCArIHkpKDEpKDIpID09IDNcbiAgICAgICAgdGVzdCBcInRlcnRpYXJ5IGZ1bmN0aW9uXCIsIC0+XG4gICAgICAgICAgYXNzZXJ0IChjdXJyeSAoeCx5LHopIC0+IHggKyB5ICsgeikoMSkoMikoMykgPT0gNlxuICAgICAgICB0ZXN0IFwibi1hcnkgZnVuY3Rpb25cIiwgLT5cbiAgICAgICAgICBhc3NlcnQgKGN1cnJ5ICh3LHgseSx6KSAtPiB3K3greSt6KSgxKSgyKSgzKSg0KSA9PSAxMFxuICAgIF1cblxuICAgIHRlc3QgXCJzdWJzdGl0dXRlXCIsIC0+XG4gICAgICBhc3NlcnQgKHN1YnN0aXR1dGUgWzEsIF8sIDNdLCBbMl0pWzFdID09IDJcblxuICAgIHRlc3QgXCJwYXJ0aWFsXCIsIC0+XG4gICAgICBzcXVhcmUgPSBwYXJ0aWFsIE1hdGgucG93LCBfLCAyXG4gICAgICBhc3NlcnQgKHNxdWFyZSAzKSA9PSA5XG5cbiAgICB0ZXN0IFwiZmxpcFwiLCAtPlxuICAgICAgc3F1YXJlID0gIChjdXJyeSBmbGlwIE1hdGgucG93KSgyKVxuICAgICAgYXNzZXJ0IChzcXVhcmUgMykgPT0gOVxuXG4gICAgdGVzdCBcImNvbXBvc2VcIiwgLT5cbiAgICAgIGludmVyc2UgPSAoeCkgLT4gMS94XG4gICAgICBzcXVhcmUgPSAoeCkgLT4geCAqIHhcbiAgICAgIGludmVyc2VTcXVhcmUgPSBjb21wb3NlIGludmVyc2UsIHNxdWFyZVxuICAgICAgYXNzZXJ0IGludmVyc2VTcXVhcmUgNSA9PSAxLzI1XG5cbiAgICB0ZXN0IFwiY29tcG9zZSAocHJvbWlzZSlcIiwgLT5cbiAgICAgIGludmVyc2UgPSAoeCkgLT4gUHJvbWlzZS5yZXNvbHZlIDEveFxuICAgICAgc3F1YXJlID0gKHgpIC0+IHggKiB4XG4gICAgICBpbnZlcnNlU3F1YXJlID0gY29tcG9zZSBpbnZlcnNlLCBzcXVhcmVcbiAgICAgIGFzc2VydCAoaW52ZXJzZVNxdWFyZSA1KS50aGVuP1xuICAgICAgYXNzZXJ0ICh5aWVsZCBpbnZlcnNlU3F1YXJlIDUpID09IDEvMjVcblxuICAgIHRlc3QgXCJ0ZWVcIiwgLT5cbiAgICAgIGYgPSB0ZWUgKHgpIC0+IDEveFxuICAgICAgYXNzZXJ0IDUsIChmIDUpXG5cbiAgICB0ZXN0IFwidGVlIChwcm9taXNlKVwiLCAtPlxuICAgICAgZiA9IHRlZSAoeCkgLT4gUHJvbWlzZS5yZXNvbHZlIDEveFxuICAgICAgYXNzZXJ0IDUsIChhd2FpdCBmIDUpXG5cbiAgICB0ZXN0IFwicGlwZVwiLCAtPlxuICAgICAgYSA9ICh4KSAtPiB4ICsgXCJhXCJcbiAgICAgIGIgPSAoeCkgLT4geCArIFwiYlwiXG4gICAgICBhYiA9IHBpcGUgYSwgYlxuICAgICAgYXNzZXJ0IChhYiBcIlNcIikgPT0gXCJTYWJcIlxuXG4gICAgdGVzdCBcImFwcGx5XCIsIC0+XG4gICAgICBhc3NlcnQgKGFwcGx5IGlkZW50aXR5LCAxKSA9PSAxXG5cbiAgICB0ZXN0IFwic3ByZWFkXCIsIC0+XG4gICAgICBhc3NlcnQgKHNwcmVhZCAoYSwgYikgLT4gYSArIGIpKFtcImFcIiwgXCJiXCJdKSA9PSBcImFiXCJcblxuICAgIHRlc3QgXCJ1bmFyeVwiLCAtPiBhc3NlcnQgKHVuYXJ5IC0+KS5sZW5ndGggPT0gMVxuICAgIHRlc3QgXCJiaW5hcnlcIiwgLT4gYXNzZXJ0IChiaW5hcnkgLT4pLmxlbmd0aCA9PSAyXG4gICAgdGVzdCBcInRlcm5hcnlcIiwgLT4gYXNzZXJ0ICh0ZXJuYXJ5IC0+KS5sZW5ndGggPT0gM1xuXG4gICAgdGVzdCBcIm5lZ2F0ZVwiLCAtPlxuICAgICAgYXNzZXJ0IChuZWdhdGUgLT4gZmFsc2UpKClcblxuICAgIHRlc3QgXCJvbmNlXCIsIC0+XG4gICAgICAoZiA9IGRvIChpPTApIC0+IG9uY2UgLT4gaSsrKSgpXG4gICAgICBhc3NlcnQgZigpID09IDBcblxuICAgIHRlc3QgXCJnaXZlblwiLCAtPlxuICAgICAgYXNzZXJ0IChnaXZlbiAoYSA9IDMsIGIgPSAyKSAtPiBhICogYikgPT0gNiAmJiAhYT8gJiYgIWI/XG4gICAgICBhc3NlcnQgKGdpdmVuIDMsIDIsIChhLGIpIC0+IGEgKiBiKSA9PSA2XG5cbiAgICB0ZXN0IFwibWVtb2l6ZVwiLCBkbyAtPlxuICAgICAgY291bnQgPSAwXG4gICAgICBmID0gbWVtb2l6ZSAoeCwgeSkgLT4gY291bnQrKzsgeFxuICAgICAgW1xuICAgICAgICB0ZXN0IFwicnVucyB0aGUgZnVuY3Rpb25cIiwgLT5cbiAgICAgICAgICBhc3NlcnQgZigxLCAyKSA9PSAxICYmIGNvdW50ID09IDFcbiAgICAgICAgdGVzdCBcImJ1dCBvbmx5IG9uY2UgZm9yIGEgZ2l2ZW4gYXJndW1lbnRcIiwgLT5cbiAgICAgICAgICBhc3NlcnQgZigxLCAyKSA9PSAxICYmIGNvdW50ID09IDFcbiAgICAgICAgdGVzdCBcIndpdGhvdXQgYWZmZWN0aW5nIGFueSBvdGhlciBhcmd1bWVudHNcIiwgLT5cbiAgICAgICAgICBhc3NlcnQgZigyLCAxKSA9PSAyICYmIGNvdW50ID09IDJcbiAgICAgIF1cbiAgXVxuXG4gIHByb2Nlc3MuZXhpdCBpZiBzdWNjZXNzIHRoZW4gMCBlbHNlIDFcbiJdLCJzb3VyY2VSb290IjoiIn0=
//# sourceURL=index.coffee