"use strict";

var _assert = _interopRequireDefault(require("assert"));

var _amen = require("amen");

var _index = require("../src/index");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(async function () {
  (0, _amen.print)((await (0, _amen.test)("Core functions", [(0, _amen.test)("noOp", function () {
    return (0, _assert.default)((0, _index.noOp)(7) === void 0);
  }), (0, _amen.test)("identity", function () {
    return (0, _assert.default)((0, _index.identity)(7) === 7);
  }), (0, _amen.test)("wrap", function () {
    return (0, _assert.default)((0, _index.wrap)(7)() === 7);
  }), (0, _amen.test)("unary", function () {
    return (0, _assert.default)((0, _index.unary)(function () {}).length === 1);
  }), (0, _amen.test)("binary", function () {
    return (0, _assert.default)((0, _index.binary)(function () {}).length === 2);
  }), (0, _amen.test)("ternary", function () {
    return (0, _assert.default)((0, _index.ternary)(function () {}).length === 3);
  }), (0, _amen.test)("curry", [(0, _amen.test)("nullary function", function () {
    var g;
    g = (0, _index.curry)(function () {
      return 0;
    });
    (0, _assert.default)(g.length === 0);
    return (0, _assert.default)(g() === 0);
  }), (0, _amen.test)("unary function", function () {
    var g;
    g = (0, _index.curry)(function (x) {
      return x;
    });
    (0, _assert.default)(g.length === 1);
    return (0, _assert.default)(g(1) === 1);
  }), (0, _amen.test)("binary function", function () {
    var g;
    g = (0, _index.curry)(function (x, y) {
      return x + y;
    });
    (0, _assert.default)(g.length === 2);
    return (0, _assert.default)(g(1, 2) === 3);
  }), (0, _amen.test)("ternary function", function () {
    var g;
    g = (0, _index.curry)(function (x, y, z) {
      return x + y + z;
    });
    (0, _assert.default)(g.length === 3);
    return (0, _assert.default)(g(1, 2, 3) === 6);
  }), (0, _amen.test)("n-ary function", function () {
    var g;
    g = (0, _index.curry)(function (w, x, y, z) {
      return w + x + y + z;
    });
    (0, _assert.default)(g.length === 0);
    return (0, _assert.default)(g(1, 2, 3, 4) === 10);
  })]), (0, _amen.test)("substitute", function () {
    return (0, _assert.default)((0, _index.substitute)([1, _index._, 3], [2])[1] === 2);
  }), (0, _amen.test)("partial", function () {
    var square;
    square = (0, _index.partial)(Math.pow, _index._, 2);
    return (0, _assert.default)(square(3) === 9);
  }), (0, _amen.test)("flip", function () {
    var square;
    square = (0, _index.curry)((0, _index.flip)(Math.pow))(2);
    return (0, _assert.default)(square(3) === 9);
  }), (0, _amen.test)("compose", function () {
    var inverse, inverseSquare, square;

    inverse = function (x) {
      return 1 / x;
    };

    square = function (x) {
      return x * x;
    };

    inverseSquare = (0, _index.compose)(inverse, square);
    return (0, _assert.default)(inverseSquare(5 === 1 / 25));
  }), (0, _amen.test)("compose (promise)", function* () {
    var inverse, inverseSquare, square;

    inverse = function (x) {
      return Promise.resolve(1 / x);
    };

    square = function (x) {
      return x * x;
    };

    inverseSquare = (0, _index.compose)(inverse, square);
    (0, _assert.default)(inverseSquare(5).then != null);
    return (0, _assert.default)((yield inverseSquare(5)) === 1 / 25);
  }), (0, _amen.test)("tee", [(0, _amen.test)("nullary function", function () {
    var f;
    f = (0, _index.tee)(function () {
      return 1;
    });
    (0, _assert.default)(f.length === 1);
    return (0, _assert.default)(f(5) === 5);
  }), (0, _amen.test)("unary function", function () {
    var f;
    f = (0, _index.tee)(function (x) {
      return 1 / x;
    });
    (0, _assert.default)(f.length === 1);
    return (0, _assert.default)(f(5) === 5);
  }), (0, _amen.test)("binary function", function () {
    var f;
    f = (0, _index.tee)(function (x, y) {
      return x + y;
    });
    (0, _assert.default)(f.length === 2);
    return (0, _assert.default)(f(5, 10) === 5);
  }), (0, _amen.test)("ternary function", function () {
    var f;
    f = (0, _index.tee)(function (x, y, z) {
      return x + y + z;
    });
    (0, _assert.default)(f.length === 3);
    return (0, _assert.default)(f(5, 10, 15) === 5);
  }), (0, _amen.test)("n-ary function", function () {
    var f;
    f = (0, _index.tee)(function (x, y, z, a) {
      return x + y + z + a;
    });
    (0, _assert.default)(f.length === 1);
    return (0, _assert.default)(f(5, 10, 15, 20) === 5);
  })]), (0, _amen.test)("tee (promise)", [(0, _amen.test)("nullary function", async function () {
    var f;
    f = (0, _index.tee)(function () {
      return Promise.resolve(1);
    });
    (0, _assert.default)(f.length === 1);
    return (0, _assert.default)((await f(5)) === 5);
  }), (0, _amen.test)("unary function", async function () {
    var f;
    f = (0, _index.tee)(function (x) {
      return Promise.resolve(1 / x);
    });
    (0, _assert.default)(f.length === 1);
    return (0, _assert.default)((await f(5)) === 5);
  }), (0, _amen.test)("binary function", async function () {
    var f;
    f = (0, _index.tee)(function (x, y) {
      return Promise.resolve(x + y);
    });
    (0, _assert.default)(f.length === 2);
    return (0, _assert.default)((await f(5, 10)) === 5);
  }), (0, _amen.test)("ternary function", async function () {
    var f;
    f = (0, _index.tee)(function (x, y, z) {
      return Promise.resolve(x + y + z);
    });
    (0, _assert.default)(f.length === 3);
    return (0, _assert.default)((await f(5, 10, 15)) === 5);
  }), (0, _amen.test)("n-ary function", async function () {
    var f;
    f = (0, _index.tee)(function (x, y, z, a) {
      return Promise.resolve(x + y + z + a);
    });
    (0, _assert.default)(f.length === 1);
    return (0, _assert.default)((await f(5, 10, 15, 20)) === 5);
  })]), (0, _amen.test)("rtee", [(0, _amen.test)("nullary function", function () {
    var f;
    f = (0, _index.rtee)(function () {
      return 1;
    });
    (0, _assert.default)(f.length === 1);
    return (0, _assert.default)(f(5) === 5);
  }), (0, _amen.test)("unary function", function () {
    var f;
    f = (0, _index.rtee)(function (x) {
      return 1 / x;
    });
    (0, _assert.default)(f.length === 1);
    return (0, _assert.default)(f(5) === 5);
  }), (0, _amen.test)("binary function", function () {
    var f;
    f = (0, _index.rtee)(function (x, y) {
      return x + y;
    });
    (0, _assert.default)(f.length === 2);
    return (0, _assert.default)(f(5, 10) === 10);
  }), (0, _amen.test)("ternary function", function () {
    var f;
    f = (0, _index.rtee)(function (x, y, z) {
      return x + y + z;
    });
    (0, _assert.default)(f.length === 3);
    return (0, _assert.default)(f(5, 10, 15) === 15);
  }), (0, _amen.test)("n-ary function", function () {
    var f;
    f = (0, _index.rtee)(function (x, y, z, a) {
      return x + y + z + a;
    });
    (0, _assert.default)(f.length === 0);
    return (0, _assert.default)(f(5, 10, 15, 20) === 20);
  })]), (0, _amen.test)("rtee (promise)", [(0, _amen.test)("nullary function", async function () {
    var f;
    f = (0, _index.rtee)(function () {
      return Promise.resolve(1);
    });
    (0, _assert.default)(f.length === 1);
    return (0, _assert.default)((await f(5)) === 5);
  }), (0, _amen.test)("unary function", async function () {
    var f;
    f = (0, _index.rtee)(function (x) {
      return Promise.resolve(1 / x);
    });
    (0, _assert.default)(f.length === 1);
    return (0, _assert.default)((await f(5)) === 5);
  }), (0, _amen.test)("binary function", async function () {
    var f;
    f = (0, _index.rtee)(function (x, y) {
      return Promise.resolve(x + y);
    });
    (0, _assert.default)(f.length === 2);
    return (0, _assert.default)((await f(5, 10)) === 10);
  }), (0, _amen.test)("ternary function", async function () {
    var f;
    f = (0, _index.rtee)(function (x, y, z) {
      return Promise.resolve(x + y + z);
    });
    (0, _assert.default)(f.length === 3);
    return (0, _assert.default)((await f(5, 10, 15)) === 15);
  }), (0, _amen.test)("n-ary function", async function () {
    var f;
    f = (0, _index.rtee)(function (x, y, z, a) {
      return Promise.resolve(x + y + z + a);
    });
    (0, _assert.default)(f.length === 0);
    return (0, _assert.default)((await f(5, 10, 15, 20)) === 20);
  })]), (0, _amen.test)("wait", async function () {
    var square;
    square = (0, _index.wait)(function (x) {
      return Math.pow(x, 2);
    });
    (0, _assert.default)(square(2) === 4);
    return (0, _assert.default)((await square(Promise.resolve(2))) === 4);
  }), (0, _amen.test)("pipe", [(0, _amen.test)("sync works", function () {
    var a, alpha, b, c;

    a = function (x) {
      return x + "a";
    };

    b = function (x) {
      return x + "b";
    };

    c = function (x) {
      return x + "c";
    };

    alpha = (0, _index.pipe)(a, b, c);
    return (0, _assert.default)(alpha("S") === "Sabc");
  }), (0, _amen.test)("async waits for antecedants (depreciated)", async function () {
    var a, alpha, b, c;

    a = function (x) {
      return Promise.resolve(x + "a");
    };

    b = function (x) {
      return Promise.resolve(x + "b");
    };

    c = function (x) {
      return Promise.resolve(x + "c");
    };

    alpha = (0, _index.pipe)(a, b, c);
    return (0, _assert.default)((await alpha("S")) === "Sabc");
  })]), (0, _amen.test)("flow", [(0, _amen.test)("sync works", function () {
    var a, alpha, b, c;

    a = function (x) {
      return x + "a";
    };

    b = function (x) {
      return x + "b";
    };

    c = function (x) {
      return x + "c";
    };

    alpha = (0, _index.pipe)(a, b, c);
    return (0, _assert.default)(alpha("S") === "Sabc");
  }), (0, _amen.test)("async waits for antecedants", async function () {
    var a, alpha, b, c;

    a = function (x) {
      return Promise.resolve(x + "a");
    };

    b = function (x) {
      return Promise.resolve(x + "b");
    };

    c = function (x) {
      return Promise.resolve(x + "c");
    };

    alpha = (0, _index.flow)(a, b, c);
    return (0, _assert.default)((await alpha("S")) === "Sabc");
  }), (0, _amen.test)("spreads array input", async function () {
    var a, alpha, b, c;

    a = function (x) {
      return Promise.resolve(x + "a");
    };

    b = function (x) {
      return Promise.resolve(x + "b");
    };

    c = function (x) {
      return Promise.resolve(x + "c");
    };

    alpha = (0, _index.flow)([a, b, c]);
    return (0, _assert.default)((await alpha("S")) === "Sabc");
  }), (0, _amen.test)("defaults to undefined", function () {
    var alpha;
    alpha = (0, _index.flow)();
    (0, _assert.default)(alpha === void 0);
    alpha = (0, _index.flow)(void 0);
    return (0, _assert.default)(alpha === void 0);
  })]), (0, _amen.test)("apply", function () {
    return (0, _assert.default)((0, _index.apply)(_index.identity, 1) === 1);
  }), (0, _amen.test)("spread", function () {
    return (0, _assert.default)((0, _index.spread)(function (a, b) {
      return a + b;
    })(["a", "b"]) === "ab");
  }), (0, _amen.test)("negate", function () {
    return (0, _assert.default)((0, _index.negate)(function () {
      return false;
    })());
  }), (0, _amen.test)("once", function () {
    var f;
    (f = function (i) {
      return (0, _index.once)(function () {
        return i++;
      });
    }(0))();
    return (0, _assert.default)(f() === 0);
  }), (0, _amen.test)("given", function () {
    (0, _assert.default)((0, _index.given)(function (a = 3, b = 2) {
      return a * b;
    }) === 6 && (typeof a === "undefined" || a === null) && (typeof b === "undefined" || b === null));
    return (0, _assert.default)((0, _index.given)(3, 2, function (a, b) {
      return a * b;
    }) === 6);
  }), (0, _amen.test)("memoize", function () {
    var count, f;
    count = 0;
    f = (0, _index.memoize)(function (x, y) {
      count++;
      return x;
    });
    return [(0, _amen.test)("runs the function", function () {
      return (0, _assert.default)(f(1, 2) === 1 && count === 1);
    }), (0, _amen.test)("but only once for a given argument", function () {
      return (0, _assert.default)(f(1, 2) === 1 && count === 1);
    }), (0, _amen.test)("without affecting any other arguments", function () {
      return (0, _assert.default)(f(2, 1) === 2 && count === 2);
    })];
  }())])));
  return process.exit(_amen.success ? 0 : 1);
})();
//# sourceMappingURL=data:application/json;base64,
//# sourceURL=/Users/david/repos/panda-garden/test/index.coffee